#include <stdio.h>

#define MAX_PARTITIONS 6
#define MAX_PROCESSES 5

struct memory_partition {
    int size;
    int allocated;
};

struct process {
    int size;
    int partition_index;
};

int main() {
 
    struct memory_partition partitions[MAX_PARTITIONS] = {{300, 0}, {600, 0}, {350, 0}, {200, 0}, {750, 0}, {125, 0}};
    struct process processes[MAX_PROCESSES] = {{115, -1}, {500, -1}, {358, -1}, {200, -1}, {375, -1}};

    // allocate memory to each process using best-fit algorithm
    for (int i = 0; i < MAX_PROCESSES; i++) {
        int best_index = -1;
        for (int j = 0; j < MAX_PARTITIONS; j++) {
            if (!partitions[j].allocated && partitions[j].size >= processes[i].size) {
                if (best_index == -1 || partitions[j].size < partitions[best_index].size) {
                    best_index = j;
                }
            }
        }
        if (best_index != -1) {
            partitions[best_index].allocated = 1;
            processes[i].partition_index = best_index;
        }
    }

    printf("Memory allocation result:\n");
    for (int i = 0; i < MAX_PROCESSES; i++) {
        if (processes[i].partition_index != -1) {
            printf("Process %d of size %d KB is allocated to partition %d of size %d KB.\n", 
                i+1, processes[i].size, processes[i].partition_index+1, partitions[processes[i].partition_index].size);
        } else {
            printf("Process %d of size %d KB cannot be allocated to any partition.\n", i+1, processes[i].size);
        }
    }

    return 0;
}
