#include <stdio.h>

#define MAX_PROCESSES 4

struct Process {
    int id;
    int burst_time;
    int waiting_time;
    int turnaround_time;
};

int main() {
    struct Process processes[MAX_PROCESSES] = {
        {1, 6, 0, 0},
        {2, 8, 0, 0},
        {3, 7, 0, 0},
        {4, 3, 0, 0}
    };
    int num_processes = MAX_PROCESSES;

    for (int i = 0; i < num_processes - 1; i++) {
        int min_index = i;
        for (int j = i + 1; j < num_processes; j++) {
            if (processes[j].burst_time < processes[min_index].burst_time) {
                min_index = j;
            }
        }
        struct Process temp = processes[i];
        processes[i] = processes[min_index];
        processes[min_index] = temp;
    }

    for (int i = 0; i < num_processes; i++) {
        if (i == 0) {
            processes[i].waiting_time = 0;
        } else {
            processes[i].waiting_time = processes[i-1].turnaround_time;
        }
        processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
    }

    float avg_waiting_time = 0;
    float avg_turnaround_time = 0;
    for (int i = 0; i < num_processes; i++) {
        avg_waiting_time += processes[i].waiting_time;
        avg_turnaround_time += processes[i].turnaround_time;
    }
    avg_waiting_time /= num_processes;
    avg_turnaround_time /= num_processes;

    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < num_processes; i++) {
        printf("P%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time);
    }
    printf("Average Waiting Time: %.2f\n", avg_waiting_time);
    printf("Average Turnaround Time: %.2f\n", avg_turnaround_time);

    return 0;
}
