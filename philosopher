#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define N 5 // Number of philosophers
#define THINKING 0 // State of philosopher when thinking
#define HUNGRY 1 // State of philosopher when hungry
#define EATING 2 // State of philosopher when eating
#define LEFT (i + N - 1) % N // Index of the left fork of philosopher i
#define RIGHT (i + 1) % N // Index of the right fork of philosopher i

int state[N]; // State of each philosopher
int phil_id[N]; // ID of each philosopher
sem_t mutex; // Mutex to protect access to state array
sem_t forks[N]; // One semaphore for each fork

// Function prototypes
void *philosopher(void *arg);
void pickup_forks(int i);
void return_forks(int i);
void test(int i);

int main() {
  int i;
  pthread_t threads[N];

  // Initialize semaphores
  sem_init(&mutex, 0, 1);
  for (i = 0; i < N; i++) {
    sem_init(&forks[i], 0, 1);
  }

  // Create philosopher threads
  for (i = 0; i < N; i++) {
    phil_id[i] = i;
    pthread_create(&threads[i], NULL, philosopher, &phil_id[i]);
  }

  // Join philosopher threads
  for (i = 0; i < N; i++) {
    pthread_join(threads[i], NULL);
  }

  return 0;
}

void *philosopher(void *arg) {
  int i = *(int *)arg;

  while (1) {
    // Think for a random amount of time
    printf("Philosopher %d is thinking\n", i);
    sleep(rand() % 5);

    // Get hungry and try to pick up forks
    printf("Philosopher %d is hungry\n", i);
    pickup_forks(i);

    // Eat for a random amount of time
    printf("Philosopher %d is eating\n", i);
    sleep(rand() % 5);

    // Return forks
    printf("Philosopher %d is done eating and returning forks\n", i);
    return_forks(i);
  }
}

void pickup_forks(int i) {
  sem_wait(&mutex); // Enter critical section

  state[i] = HUNGRY; // Set philosopher's state to hungry
  test(i); // Try to pick up forks

  sem_post(&mutex); // Exit critical section
  sem_wait(&forks[i]); // Wait for forks to be available
}

void return_forks(int i) {
  sem_wait(&mutex); // Enter critical section

  state[i] = THINKING; // Set philosopher's state to thinking
  test(LEFT); // Let left neighbor try to pick up forks
  test(RIGHT); // Let right neighbor try to pick up forks

  sem_post(&mutex); // Exit critical section
}

void test(int i) {
  if (state[i] == HUNGRY && state[LEFT] != EATING && state[RIGHT] != EATING) {
    state[i] = EATING;
    sem_post(&forks[i]);
  }
}
