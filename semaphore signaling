#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

sem_t semaphore;
void* process(void* arg) {
    int processNum = *((int*)arg);

    printf("Process P%d is waiting...\n", processNum);
    sem_wait(&semaphore);
    printf("Process P%d has acquired the resource.\n", processNum);

    sleep(2);

    printf("Process P%d is releasing the resource.\n", processNum);
    sem_post(&semaphore);

    pthread_exit(NULL);
}

int main() {
    int numInstances = 4;
    int numProcesses = 4;
    int processNums[] = {1, 2, 3, 4};

    sem_init(&semaphore, 0, numInstances);

    pthread_t threads[numProcesses];

    for (int i = 0; i < numProcesses; i++) {
        pthread_create(&threads[i], NULL, process, &processNums[i]);
    }

    for (int i = 0; i < numProcesses; i++) {
        pthread_join(threads[i], NULL);
    }

    printf("Process P5 is waiting...\n");
    sem_wait(&semaphore);
    printf("Process P5 has acquired the resource.\n");
    printf("Process P5 is releasing the resource.\n");
    sem_post(&semaphore);

    sem_destroy(&semaphore);

    return 0;
}
